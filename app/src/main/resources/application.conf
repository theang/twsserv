postgres {
    dataSourceClass = "org.postgresql.ds.PGSimpleDataSource"
    properties = {
        serverName = "localhost"
        portNumber = "55432"
        databaseName = "serv1"
        user = "serv1"
        password = "secret123"
    }
    numThreads = 10
}

twsClient {
    host = "127.0.0.1"
    port = "7496"
    clientId = "2"
    loadChunkSize = 100
    loadTickChunkSize = 10
}

yahooClient {
    baseUrl = "https://query1.finance.yahoo.com/v7/finance/download/%s?period1=%s&period2=%s&interval=%s&events=history&includeAdjustedClose=true"
    earningsUrl = "https://finance.yahoo.com/calendar/earnings"
    baseStockUrl = "https://finance.yahoo.com/quote"
    oneTimePassword = "nzlcfjtybulqqjvx"
    rateLimit = 2000.0
    rateLimitSeconds = 3600
    offsetStep = 100
}

nasdaqClient {
    earningsUrl = "https://api.nasdaq.com/api/calendar/earnings?date=%s&api_key=%s"
    rateLimitRequests = 50000
    rateLimitTimeSecond = 86400
}

multiClient {
    defaultClient = "TWSClient"
    clientsMap = [
        { method: "getEarningsForDate", client: "NasdaqClient" }
    ]
}

databaseOperation {
    tickerRepoMaxAttempts = 10
    tickerRepoConstantDelay = 500
    tickerRepoRandomDelay = 500
}

akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  loglevel = "INFO"
  stdout-loglevel = "INFO"
  rem-log-config-on-start = on
  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
      unhandled = on
      event-stream = on
      fsm = on
      router-misconfiguration = on
    }
  }
}

database-blocking-dispatcher {
  type = Dispatcher
  executor = "thread-pool-executor"
  thread-pool-executor {
    fixed-pool-size = 10
  }
  throughput = 1
}

purgeActor {
    interval = 10
}

server {
    port = 8082
}

earningsJob {
    scheduleName = "earningsJob"
    daysBefore = 5
    daysAfter = 35
}